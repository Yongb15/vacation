2023-07-26

 ★ 연산을 하려면 값이 필요, 값은 공간(메모리가 필요), 연산은 공간이 필요
 ★ 스택 영역 메모리, 힙 영역 메모리 그려보기

 함수 호출과 스택 메모리
	- 스택영역 메모리
		ㄴ 함수에 정의된 변수 -> 실행될 때 스택에서 공간(메모리)을 할당
		ㄴ 연산이 종료 -> 메모리 회수
		ㄴ 임시 메모리(stack)

	- 함수에 정의된 변수
		ㄴ 함수가 실행될 때 공간을 할당, 연산 종료 -> 제거
		ㄴ 지역 변수

	- 함수 이름 - 변수명과 규칙이 같다.

	* 지역 변수 : 지역 [ex) main함수 add함수] 안에서만 사용 가능
	
	※ 	- 스택(stack) 구조 : 

		- 큐(queue)  구조 : 

 클래스와 인스턴스
	- 클래스 사용과 main( ), 함수
		ㄴ JVM에서 애플리케이션을 실행하기위한 메서드
		ㄴ 모든 프로그램의 시작 함수
	
	- new 예약어로 클래스 생성하기
		ㄴ new 클래스명과 동일한 함수명( );
	
	- 인스턴스와 참조 변수

 인스턴스와 힙 메모리					★ 
	- 힙 영역 메모리
		ㄴ 객체 전용 메모리

	스택 메모리에서 힙 메모리의 주소를 참조하여 접근

	- 힙 메모리주소 : System.identityHashCode( )

 참조 변수와 참조 값
	- 클래스로 정의된 변수 -> 참조 변수

 자료형
	- 기본 자료형
		ㄴ 숫자를 담는 자료형
			ㄴ 정수형, 실수형, 논리형, 문자형
	- 참조 자료형
		ㄴ 클래스형 자료형
			ㄴ 생성된 객체의 주소값을 참조하는 자료형

	★ GB(garbage Collector) : 메모리 청소부

 생성자
	- 객체를 생성하는 메서드
	- 반환값은 생성된 객체의 주소
	- 연산의 결과 : 생성된 객체
	- 반환값 타입 명시 X : 변경하면 안된다.
	- return 예약어 X

 디폴트 생성자(기본 생성자)
	- 클래스에 생성자 메서드를 따로 정의하지 않으면 컴파일러에서 자동 추가해주는 생성자 메서드
	- public 클래스명( ) { }
 
 생성자 만들기

 생성자 오버로드

	※ 함수의 시그니쳐(Signature)
	   패키지명 + 클래스명 + 반환값 타입 + 함수명 + 매개변수
		- 함수의 시그니처가 다르면 다른 함수
		- 함수의 시그니처가 같으면 같은 함수		
	- 메서드 오버로드
		ㄴ 다른 시그니쳐의 동일 함수명을 가진 여러 함수를 정의











