 2023.07.25 자바 강의내용

 향상된 for문과 배열
	- 반복은 거의 대부분 처음부터 끝까지
	- 형식을 단순화
	for(각 요소 : 배열) {

	}

	ex)	for(int num : nums) {
			System.out.println(num);
		}					// 향상된 for문

	- 향상된 for문 : 배열, 컬렉션

 다차원 배열
	- 일차원 배열 : 직선 [ ]
	- 이차원 배열 : 평면 [ ][ ]	/    행열
	- 삼차원 배열 : 입체 [ ][ ][ ]

	자료형[ ][ ] 배열명 = new 자료형[행][열];

 선언과 동시에 초기화
	자료형[ ][ ] 배열명 = new 자료형[ ][ ] { {값1, 값2, ...},{값3, 값4, ...} }
	자료형[ ][ ] 배열명 = { {값1, 값2, ...}, {값3, 값4, ...} }
 	- java.util 패키지 : 편의 기능
 	- java.util.Arrays : 배열의 편의기능
 		ㄴ Arrays.util.toString(nums) -> 일차원 배열 출력
		ㄴ Arrays.deepToString(nums) -> 다차원 배열 출력

 같은 패키지 안에서만 클래스의 자원을 공유
	import 다른 패키지명.클래스명

 자료형
	- 기본 자료형
		- 숫자를 담을 수 있는 자료형
			- 정수형 : byte(1), short(2), int(4), long(8) 
			- 실수형 : float(4), double(8)
			- 논리형 : boolean(1)
			- 문자형 : char(2~3)
 
	- 참조 자료형
		- 동일 크기의 자료형
		- 주소값



<객체지향 프로그래밍>

 객체
	객체 : Object - 사물, 대상
		ex) 컴퓨터, 사람
	- 속성 : 변수
	- 행위 : 함수(기능)

	기능 완성
		- 다른 객체간의 협동(의존), 상호작용 -> 객체 지향 프로그래밍
 
 객체와 객체 지향 프로그래밍
	
 클래스 살펴보기						// 클래스 : 객체를 만들기 위한 설계도
	class 클래스명 {
		
		변수 정의

		함수 정의

	}

 new 클래스명()
	- 클래스에 정의된 변수 정의(코드) -> 객체 생성 -> 변수(공간을 할당)
	Book b1 = new Book( );
	- 객체 생성된 변수 : 마침표(.) 연산자 접근
	b1.title

 마침표(.)
	b1.showinfo( );
	- 변수의 정의 : 공간(메모리)의 이름

 클래스 이름을 짓는 규칙
	- 규칙 : 변수와 제약 비슷
	- 관례 : 첫 글자 대문자
		- 여러 단어로 구성된 클래스명
		  Order Info : 파스칼 표기법

 클래스의 속성을 구현하는 멤버변수

 클래스와 인스턴스
	- 인스턴스(instance - 실체 : 실제로 존재한다)
	- 클래스 : 코드에 불과 -> 객체 -> 메모리 공간 할당, 변수
		(인스턴스 == 객체)

 패키지
	- 마침표(.) : 다른 폴더, 다른 클래스
	   import

 메서드
	- 클래스에 정의된 함수

 함수
	- 하나의 기능을 수행하는 일련의 코드
	- 함수는 어떤 기능을 수행하도록 미리 구현해놓고 필요할 때마다 호출하여 사용할 수 있습니다.

 함수의 입력과 반환

 함수 정의하기
	- ex) 2x + 1 = y
	접근제어자 반환값자료형 함수이름( 매개변수1, 매개변수2, . . . ) {
			// 실행코드

			return 반환값;
	}
	- 함수이름
	- 매개변수
	- return 예약어와 반환형 

 함수 호출하고 값 반환하기
	함수명 (값, . . . );
	- 반환값이 없는 경우 : 반환값 타입 void
	- 함수 : 실행 코드 정의

 함수 호출과 스택 메모리
	- 함수 : 실행 코드 정의
	- 필요한 자원 : 변수의 메모리
	- 함수가 연산을 수행 : 함수가 호출되었을 때 / 메모리 공간이 생성
	- 함수가 연산을 수행을 완료 (return 반환값) / 메모리 공간을 회수
	- 임시 메모리)

 스택 영역 메모리
	- 함수에 정의된 변수 -> 스택에서 생성되고 소멸
		-> 함수가 실행될때만 변수 공간을 할당
		-> 함수의 실행코드가 정의된 영역 : 함수 지역
		-> 지역변수
 		ㄴ 스택(stack) 구조 (아래가 막혀있는 원통형 구조 ex) 저금통, 함수)
			- 가장 처음에 투입된 자료 -> 가장 마지막에 나오는 구조
			- 가장 마지막에 투입된 자료 -> 가장 처음에 나오는 구조 
		ㄴ 큐(queue) 구조 (양쪽이 뚫려있는 구조 ex) 선착순, 번호표)
			- 가장 처음에 투입된 자료 -> 가장 처음에 나오는 구조
			- 가장 마지막에 투입된 자료 -> 가장 마지막에 나오는 구조

 


















	
	