 2023.07.20 자바 강의내용

 public static void main(String [] args) - 이게 c언어로 main or psvm  사용

 ; (세미클론) - 필수

 System.out.println( ); - 출력문

 .java -> 컴파일(javac) -> .class (중간언어)

 Write Once, Run Everywhere ->  자바의 모토 (각 플랫폼에 맞게 알아서 변환)

 JVM (Java Virtual Machine) -> 중간언어인 class -> 플랫폼 (윈도우, 리눅스 등) 바이트 코드로 변환 -> 실행

 컴퓨터는 데이터를 어떻게 표현할까?

 - 컴퓨터의 부품 (메모리) 반도체
신호 X - 0, 신호 O - 1
 - 2진수 사용

 비트 (bit) : 0, 1로 표현하는 최소 단위
	8bit -> 1byte

 양수, 음수

 1byte에서 표현 가능한 숫자범위 (첫 번째 비트는 부호비트 0 - 양수, 1 - 음수) 
 - 2^7 ~ 2^70-1 (-128 ~ 127) <- 범위

 변수 -> 바구니

 - 변하는 수 (공간 - 메모리) 
 - 이름을 가짐
 - 공간(메모리)의 이름

 변수 선언 : 변수의 이름을 정하는 것

 자료형 변수명; <- 변수의 구조

 int(공간의 크기) num(변수명);(세미클론) 

 변수명 = 값;  -  대입

 변수 초기화

 - 값을 처음에 대입

 - 선언과 동시에 초기화
 ex) int num = 10;

 변수 이름 정하기
 1) 알파벳(대소문자), 숫자, 특수문자($, _)
 2) 숫자는 가장 앞에 올 수 없다.
 3) 예약어는 사용 불가 ex) if, for, throw등
 
 ex)        
	int 1st (x)
 	int num_1 (o)
	int $dollar (o)
 	int num-1 (x)

 변수명의 관례
 
 - 변수명은 의미가 있는 이름으로 사용

 ex)  
	int a; (x)
      	int numOfStudent; (o)

- 여러 단어로 구성된 변수명
 
 ex)
	int numOfStudent;
	num + of + student - 카멜 표기법(첫 번째 문자를 제외한 나머지 문자의 제일 앞 단어를 대문자로 사용하는 법)

변수가 저장되는 공간의 특성, 자료형

 변수 : 공간(메모리)의 이름
 자료형 : 공간의 크기
	- 공간의 크기에 따라 자료형이 정해짐
		- 기본자료형 : 공간이 정해져 있고, 숫자를 입력할 수 있는 자료
		- 참조자료형 : 

 
 기본 자료형의 종류 (암기!)
 
 - 정수 자료형 - 소수점이 없는 수 ex) 10, -10, 4, 1000
	1byte : byte
	2byte : short
	4byte : int
	8byte : long

 - 실수 자료형 - 소수점이 있는 수 ex) 3.12, 10.4
	4byte : float
	8byte : double

 - 문자 자료형 
	2~3byte : char
		- 값은 '문자'
		- 숫자
		- 특정 숫자 - 특정 문자 : 아스키코드 (1바이트 - 영문만 표현 가능)
				     : 유니코드 (2바이트 (CPC949, EUC-KR), 3바이트(UTF-8)) 

 - 논리 자료형 = 참(true) - 1, 거짓(false) - 0
	1byte : boolean
	
 상수와 리터럴
 상수 : 변경을 하지 못하는 값 지정

 상수 선언
	final int num;		final : 변경 불가

 상수명 관례  
	- 대문자로 변수명 작성
	- 여러 단어로 구성된 변수 단어오하 단어 사이 _ 연결
	
	ex) final int NUM_OF_STUDENT = 10;

 주석(comment) : 설명
	- 컴파일시 제거되는 소스
	- 실행 배제
	         ex)
		// 설명 -> 한줄 설명
		/* */ -> 여러줄 설명
	
 		/** 자바 문서에 첨부되는 설명

 리터럴
	- 재료가 되는 수
	- 한개만 존재
`	- 여러 변수에 대입이 되는 수

 정수 -> int
 	int를 쓰는 이유
		- 정수 -> int -> long으로 처음부터 인식 :  L(l)을 숫자 끝에 추가
		- 숫자가 작든 크든 int로 하는게 효율적이다.
		- 자바가 효율적으로 관리할 수 있는 자료형 -> int형
		- 자바는 정수가 들어오면 무조건 int로 먼저 인식, 자료형이 다르면 자료형을 변경

 실수 -> double
	double을 쓰는 이유
		- double을 가장 먼저 인식
		- float로 처음부터 인식 : F(f)을 숫자 끝에 추가

 형변환 
	형변환 - 다른 자료형 간의 변환

	묵시적 형변환 (자동형 변환)
 		- 형변환시 문제가 발생하지 않는 조건이면 자동 형변화 발생
		- 작은 크기의 자료형 -> 큰 크기의 자료형 
		- 정수 -> 실수
			ex) byte(1) -> short(2) -> int(4) -> long(8) -> float(4) -> double(8)
			      	      char(2)

	// char : 양의 정수(unsigned)
	   
	   실수 : 소수점이 있는 수
		- 0 ~ 1 : 무한대
		- 모든 실수는 정수를 포함

	명시적 형변환 (강제형 변환)
		- 형변환시 문제 발생 가능성이 있는 경우, 자동 변환 x, 명시적으로 형변환 의사 표형 (변경할 자료형)
		- 큰 자료형 -> 작은 자료형 ()
		- 실수 -> 정수 			ex) 3.14 -> 3
		- 
		-
		-























 
