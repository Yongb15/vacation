백준

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int get_end(int num)	// num이 몇 자리 수인지 반환하는 함수
{
	int x = 10;
	int cnt = 1;
	if (num >= 10)	//num이 두자리 수 이상이면
	{
		while (num >= x)	//
		{
			num /= x;		//num을 10으로 나누고
			cnt++;			//cnt를 1증가.
		}
	}
	return cnt;
}

int main(void)
{
	int i, temp, cnt, cnt47 = 0, n;
	int num[6] = { 0 };

	scanf("%d", &n);

	/*
	for ( i = 0; i < 6; i++)		//test
	{
		printf("%d", num[i]);
	}*/

	while (1)
	{
		temp = n;
		cnt = get_end(n);
		//printf("start)\n n:%d\ntemp:%d\ncnt:%d\n", n, temp, cnt);		//test
		for (i = 5; i >= 0; i--)
		{
			num[i] = temp % 10;
			if (temp < 10) break;
			temp /= 10;
		}
		//for (i = 0; i < 6; i++)
		{
			//	printf("%d, ", num[i]);
		}
		//printf("\n\n");
		for (i = 0; i < 6; i++)
		{
			if (num[i] == 4 )
				cnt47++;
			if (num[i] == 7)
				cnt47++;
		}
		//printf("mid)\n n:% d\ntemp : % d\ncnt : % d\ncnt47: %d\n", n, temp, cnt, cnt47);
		//printf("----------------------\n\n");
		if (cnt47 == cnt)
			break;
		else	//아니면 초기화
		
		{
			n--;						//1 감소
			cnt47 = 0;					//변수 초기화
			for (i = 0; i < 5; i++)		//배열을 0으로 초기화
			{
				num[i] = 0;
			}
		}
		//printf("end)\n n:% d\ntemp : % d\ncnt : % d\ncnt47: %d\n", n, temp, cnt, cnt47);
		//printf("----------------------\n\n");
	}
	printf("%d", n);
}


#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int main(void)	//1259번 문제 펠린드롬수
{
	int inputted_number_array[5] = { 0, };	//최대 5자리 수를 입력받기 때문에 크기를 5로 선언
	int reverse_array[5] = { 0, };			//역설된 배열을 저장할 배열 (거꾸로 확인할 배열)
	int number_cnt = 0;						//입력받은 숫자가 몇자리 수인지 저장할 변수
	int inputted_number = 0;				//입력받을 변수
	int index_save = 0;						//특정조건을 만족할 찰나의 인덱스값을 저장할 변수
	int index_save2 = 0;					//22
	int array_equal_cnt = 0;					//두 배열의 요소가 같은 횟수를 카운트
	while (1)
	{
		scanf("%d", &inputted_number);
		if (inputted_number == 0) break;	//입력받은 수가 0인지 확인
											//0이면 즉시 루프탈출 후 프로그램 종료

		if (inputted_number < 10)			//입력받은 수가 한자리 수 인지 확인
											//한자리 수는 무조건 팰림드롬수 이므로
		{
			printf("yes\n");				//yes 출력 후
			continue;						//건너뛰기
		}
		while (inputted_number >= 10)		//입력받은 값이 한자리 수가 될 때까지
		{
			roop_1 : for (int i = 4; i < 0; i--)		//배열의 끝자리부터 저장
			{
				if (inputted_number < 10)
				{
					inputted_number_array[i] = inputted_number;//마지막 숫자 저장
					index_save = i;							   //인덱스 따로 빼놓고
					break;									   //roop_1을 탈출
				}
				inputted_number_array[i] = inputted_number % 10;
				//배열의 꼬리부터 한자리씩 저장. (10으로 나눈 나머지는 1의 자리 숫자가 됨)
				inputted_number /= 10;
				//입력받은 수를 10으로 나눠서 한자리 줄임.
				//다시 반복.
			}
			//roop_1을 완료하면, inputted_number_array 배열에는 정순서대로 인덱스에 값이 저장됨.
			//예를들어, 123을 입력하면, array[0]=0, array[1]=0,
			//							array[2]=1,array[3]=2, array[4]=3 으로 저장됨.
		}
		for (int i = 0; i < 5; i++)
		{
			reverse_array[i] = inputted_number_array[4 - i];//배열을 역순으로 붙혀넣기
		}
		for (int i = index_save; i < 5; i++)
		{
			if (reverse_array[i] == inputted_number_array[i])//두 배열의 요소가 같으면
				array_equal_cnt++;							//같은 횟수를 카운트
		}
		if (number_cnt == array_equal_cnt) //입력된 수의 자리수와,
										   //두 배열의 요소가 동일했던 횟수가 같으면
										   //두 수는 팰린드롬 수 이므로
			printf("yes\n");	
		else printf("no\n");
	}
	return 0;

}