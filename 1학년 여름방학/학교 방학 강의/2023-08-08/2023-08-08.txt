스택영역
main부터 점점 쌓아짐

char = 1byte
int = 4byte
float = 4byte
double = 8byte

포인터는 접근할 수 없는 함수는 주소를 통하여 접근할 수 있게 해줌.

int a; == a[0]

int arr[5] = { 5, 3, 1, 2, 4} ;

printf(*(arr+2)); == printf(arr[2]);

*arr = arr[0];
*arr + 1 = arr[1];

동적할당★

ptr = (int*)malloc(std_cnt * sizeof(int));			// 중요!

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <malloc.h>					// malloc 함수 쓸때 필요
#include <stdlib.h>					// 이거만 써도 됨

int main()
{
	// 동적할당
	// 배열을 이용해 전체 학생의 점수 합을 구하라
	// 단, 학생 수는 사용자로부터 입력받는다.

	int point = 0;
	int std_cnt = 8;				// 초기화 중요
	int sum = 0;					// 누적 변수
	int* ptr = 0;						// 포인터 변수

	printf("학생 수를 입력하세요\n");

	scanf_s("%d", &std_cnt);

	ptr = (int*)malloc(std_cnt * sizeof(int));			// 중요!
	//			변수값(학생 수) * 크기를 구하는 함수 size(int 자료형)
	// (자료형)다른 자료형의 변수; = 명시적 형변환 : 캐스팅
	// 
	if (ptr == NULL) {
		printf("동적할당 실패");
		return -1;
	}
	for (int i = 0; i < std_cnt; i++) {
		scanf_s("%d", &point);
		ptr[i] = point;
		sum += ptr[i];
	}
	printf("총점 : %d\n", sum);
}

자바

변수는 하나의 값을 저장할 수 있는 공간

기본형 : 실제 값을 저장(int, float, double, boolean)
참조형 : 객체의 주소를 저장(String, 배열, 클래스)

char = 2byte : 유니코드

final = 상수 : 수정하기 쉽다.

연산자 사용시 주의사항
a = b
a값은 변수만 가능
b값은 아무거ㅏ 상관없음

논리연산자 잘 쓰는 법
OR은 참일 확률이 높은 피연산자를 왼쪽
AND는 거짓일 확률이 높은 피연산자를 왼쪽

switch문의 제약조건
조건식의 결과 값이 반드시 정수 또는 문자열이여야 함.
case문의 값은 정수 상수만 가능(중복 X)

반복문 고르는 법
for - 반복 횟수를 알고 있을때
while - 초기화나 증감식이 필요없을 떄(무한반복)
do-while - 반복적으로 사용자의 입력을 받을 때

향상된 for문
배열이나 컬렉션에 저장된 요소에 접근할 때 편리

for(타입 변수명 : 배열이나 컬렉션) {
	반복할 문장	
} 

배열
타입[] 변수명 = new 타입[];
int[] arr2 = new int[3];     <-      자바에서의 배열
.length = 배열의 길이(int형 상수)

길이가 int형 상수인 이유 : 배열을 선언할 때 메모리의 빈 부분에서 크기만큼 연속적인 공간을 할당

배열의 복사
for문 사용, System.arraycopy(), Arrays.copyof() 이용

2차원 배열
타입[][] 변수이름 = new 타입[행][열]



















